export class SinChar{constructor(s){this.digits=Array.from(document.querySelectorAll(s.selector)),this.resultingPassInput=document.getElementById(s.hiddenInputId),this.filledPass=!!this.resultingPassInput.value,this.fillRecieved=s.fillRecievedValue,this.recievedPass=[],s.numbersOnly?this.numbersOnly=s.numbersOnly:this.numbersOnly=!1,s.filledClass&&(this.filledClass=s.filledClass),this.filledPass&&this.fillRecieved&&(this.recievedPass=this.resultingPassInput.value.split(""))}processCodeInput(s){this.digits.forEach((e,i)=>{this.filledPass&&this.fillRecieved&&(e.value=this.recievedPass[i],this.filledClass&&e.classList.add(this.filledClass)),this.filledClass&&(e.addEventListener("focus",()=>{e.classList.add(this.filledClass)}),e.addEventListener("blur",()=>{0===e.value.length&&e.classList.remove(this.filledClass)})),e.addEventListener("paste",e=>{var t;const l=null===(t=e.clipboardData)||void 0===t?void 0:t.getData("text").split("");e.preventDefault(),l&&(null==l?void 0:l.length)>0&&(this.digits[i].value=l[i],this.digits.forEach((s,e)=>{this.digits[e].value=l[e],this.resultingPassInput.value+=this.digits[e].value,this.filledClass&&this.digits[e].classList.add(this.filledClass)})),this.resultingPassInput.value.length===this.digits.length&&s&&s()}),e.addEventListener("keydown",s=>{if(this.numbersOnly&&!/[0-9]|Backspace|Control|v|Tab/.test(s.key))return console.log(s.key),void s.preventDefault();""===e.value&&i>0&&"Backspace"===s.key&&this.digits[i-1].focus(),""!==e.value&&i>0&&"Backspace"===s.key&&(e.value=""),""!==e.value&&i>=0&&i<this.digits.length-1&&"Backspace"!==s.key&&this.digits[i+1].focus()}),e.addEventListener("input",t=>{t.preventDefault(),i>=0&&i<this.digits.length-1&&""!==e.value&&this.digits[i+1].focus(),this.resultingPassInput.value="",this.digits.forEach(s=>{this.resultingPassInput.value+=s.value}),this.filledClass&&this.digits.forEach(s=>{""!==s.value?s.classList.add(this.filledClass):s.classList.remove(this.filledClass)}),this.resultingPassInput.value.length===this.digits.length&&s&&s()})})}}
